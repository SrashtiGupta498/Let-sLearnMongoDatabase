

# **Indexing in MongoDB: A Complete Guide**

---

## üìå What is Indexing in MongoDB?

An **index** in MongoDB is a data structure that improves the speed of search queries by allowing the database to find data without scanning every document.

Think of it like an index in a book ‚Äî instead of flipping through every page, you go directly to the topic.

Without indexing, MongoDB performs a **collection scan** (scanning every document), which is inefficient for large datasets.

---

## üöÄ Why Use Indexes?

Indexes improve:

* ‚úÖ Query performance
* ‚úÖ Sort performance
* ‚úÖ Uniqueness enforcement
* ‚úÖ Efficient aggregation

But they come with trade-offs:

* ‚ùå Slower writes (inserts/updates/deletes)
* ‚ùå Increased disk usage
* ‚ùå Over-indexing leads to complexity

---

## üõ†Ô∏è Types of Indexes in MongoDB

### 1. **Single Field Index**

```js
db.users.createIndex({ age: 1 })     // Ascending
db.users.createIndex({ age: -1 })    // Descending
```

### 2. **Compound Index**

```js
db.users.createIndex({ age: 1, name: 1 })
```

> Order matters ‚Äî useful when queries use both fields.

### 3. **Multikey Index**

```js
db.products.createIndex({ tags: 1 })
```

For arrays ‚Äî MongoDB creates index entries for each array element.

### 4. **Text Index**

```js
db.articles.createIndex({ title: "text", body: "text" })
db.articles.find({ $text: { $search: "mongodb" } })
```

### 5. **Hashed Index**

```js
db.users.createIndex({ userId: "hashed" })
```

Primarily used in sharded clusters.

### 6. **Geospatial Index**

```js
db.places.createIndex({ location: "2dsphere" })
```

Used for location-based search.

---

## üìà Explain and Analyze Queries

Use `explain()` to inspect query execution:

```js
db.users.find({ age: 25 }).explain("executionStats")
```

Look for:

* `IXSCAN`: Index Scan (‚úÖ Efficient)
* `COLLSCAN`: Collection Scan (‚ùå Inefficient)
* `nReturned`, `totalDocsExamined`: documents returned vs scanned

---

## ‚öôÔ∏è Best Practices for Indexing

1. Profile your queries using `explain()` or Atlas Profiler.
2. Index fields that are frequently **queried or sorted**.
3. Avoid indexing fields with **low cardinality**.
4. Prefer **compound indexes** where multiple fields are used.
5. Remove **unused indexes** regularly.
6. Monitor index **hit rate and size**.

---

## ‚ùì When Not to Index

* Fields not involved in filtering, sorting, or searching.
* Very common fields (e.g., gender) with low selectivity.
* Arrays with many elements (can explode index size).

---

## üß™ Example Use Case

You have a document like:

```json
{
  "name": "Alice",
  "email": "alice@example.com",
  "age": 30,
  "hobbies": ["reading", "traveling"]
}
```

You want to:

* Search by email ‚Üí `{ email: 1 }`
* Filter & sort by age and name ‚Üí `{ age: 1, name: 1 }`
* Search text in hobbies ‚Üí `{ hobbies: "text" }`

---

## üßπ Housekeeping Commands

* **List indexes**

```js
db.users.getIndexes()
```

* **Drop a specific index**

```js
db.users.dropIndex("age_1")
```

* **Drop all indexes (except \_id)**

```js
db.users.dropIndexes()
```

---

## üìä Summary Table

| Index Type   | Use Case                | Syntax Example             |
| ------------ | ----------------------- | -------------------------- |
| Single Field | Simple queries or sorts | `{ age: 1 }`               |
| Compound     | Multi-field queries     | `{ age: 1, name: 1 }`      |
| Multikey     | Arrays                  | `{ tags: 1 }`              |
| Text         | Full-text search        | `{ title: "text" }`        |
| Hashed       | Sharding                | `{ userId: "hashed" }`     |
| Geospatial   | Location-based data     | `{ location: "2dsphere" }` |

---

## üß† Conclusion

Indexing is a **powerful performance tool** in MongoDB ‚Äî when used correctly. Avoid blindly adding indexes. Profile your queries, monitor performance, and apply best practices to get the most out of your MongoDB collections.

---

